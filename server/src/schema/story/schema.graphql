type Story {
  id: ID!
  title: String!
  description: String!
  content: String!
  difficulty: Int!
  readCount: Int!
  audioUrl: String
  imageUrl: String
  averageRating: Float
  isPublished: Boolean!
  isReviewed: Boolean!
  languageName: String!
  startedAt: DateTime
  completedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!

  vocabularies: [Vocabulary!]
  user: User
  tags: [Tag!]
}

scalar DateTime

extend type Query {
  stories: [Story!]!
  story(id: ID!): Story
}

input CreateStoryInput {
  title: String!
  description: String!
  content: String!
  difficulty: Int!
  languageName: String!
  tags: [String!]!
}

input UpdateStoryInput {
  title: String
  description: String
  content: String
  difficulty: Int
  languageName: String
  tags: [String!]
}

extend type Mutation {
  createStory(input: CreateStoryInput!): Story!
  updateStory(id: ID!, input: UpdateStoryInput): Story!
  deleteStory(id: ID!): Boolean!
}