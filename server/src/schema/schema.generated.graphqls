type Chapter {
  audioUrl: String
  chapterProgresses: [ChapterProgress!]
  comprehensionQuestions: [ComprehensionQuestion!]
  content: String!
  createdAt: DateTime!
  estimatedReadingTime: Int
  id: ID!
  orderIndex: Int!
  story: Story
  storyId: ID!
  title: String!
  updatedAt: DateTime!
}

type ChapterProgress {
  chapter: Chapter!
  chapterId: ID!
  completedAt: DateTime
  currentPosition: JSON
  id: ID!
  lastReadAt: DateTime
  progress: Float!
  readingProgress: ReadingProgress!
  readingProgressId: ID!
  startedAt: DateTime
}

type ChatMessage {
  content: String!
  id: ID!
  role: String!
  session: ChatSession
  sessionId: ID!
  timestamp: DateTime
}

type ChatSession {
  createdAt: DateTime!
  difficulty: Int!
  flashcardSet: FlashcardSet
  flashcardSetId: ID
  id: ID!
  language: Language
  languageName: String!
  messages: [ChatMessage!]
  mode: String!
  name: String!
  updatedAt: DateTime!
  user: User
  userId: ID!
}

type ComprehensionQuestion {
  answer: Int!
  chapter: Chapter!
  chapterId: ID!
  id: ID!
  options: [ComprehensionQuestionOption!]!
  question: String!
}

type ComprehensionQuestionOption {
  content: String!
  id: ID!
  isCorrect: Boolean!
  order: Int!
  question: ComprehensionQuestion!
  questionId: ID!
}

input CreateStoryInput {
  content: String!
  description: String!
  difficulty: Int!
  isPublished: Boolean!
  languageName: String!
  tags: [String!]!
  title: String!
  translatedTitle: String!
}

input CreateWorksheetInput {
  content: String!
  languageName: String!
}

scalar DateTime

type Exercise {
  content: JSON!
  id: ID!
  order: Int!
  submissions: [Submission!]
  type: ExerciseType!
  worksheet: Worksheet!
  worksheetId: ID!
}

enum ExerciseType {
  FILL_IN_BLANK
  MATCHING
  MULTIPLE_CHOICE
  SENTENCE_CONSTRUCTION
  TRANSLATION
}

enum FaceType {
  AUDIO_NATIVE
  AUDIO_SLOW
  CHARACTER
  CONJUGATION
  CONTEXT_NOTES
  DEFINITION
  EXAMPLE_SENTENCE
  EXAMPLE_SENTENCE_TRANSLATION
  GENDER
  HIRAGANA
  IMAGE
  KATAKANA
  MNEMONIC
  NOTES
  OTHER
  PART_OF_SPEECH
  PINYIN
  PLURAL_FORM
  ROMAJI
  TRANSLATION
  TRANSLITERATION
  VIDEO
  WORD
}

type Flashcard {
  createdAt: DateTime!
  easeFactor: Float
  faces: [FlashcardFace!]
  id: ID!
  interval: Float
  n: Int
  nextReviewAt: DateTime
  set: FlashcardSet
  setId: ID!
  updatedAt: DateTime!
}

type FlashcardFace {
  audioUrl: String
  content: String!
  createdAt: DateTime!
  flashcard: Flashcard
  flashcardId: Int!
  id: ID!
  imageUrl: String
  isFront: Boolean!
  order: Int!
  type: FaceType!
  updatedAt: DateTime!
}

input FlashcardFaceInput {
  audioUrl: String
  content: String!
  imageUrl: String
  isFront: Boolean!
  order: Int!
  type: FaceType!
}

type FlashcardSet {
  cards: [Flashcard!]
  chatSessions: [ChatSession!]
  description: String
  id: ID!
  language: Language
  languageName: String!
  lastFrontFace: FaceType
  name: String!
  totalCards: Int!
  user: User
  userId: ID!
  vocabularies: [Vocabulary!]
}

scalar JSON

type Language {
  chatSession: [ChatSession!]
  code: String!
  flashcardSets: [FlashcardSet!]
  id: ID!
  languageFaceConfig: LanguageFaceConfig
  name: String!
  stories: [Story!]
  users: [User!]
  vocabularies: [Vocabulary!]
  worksheets: [Worksheet!]
}

type LanguageFaceConfig {
  config: JSON!
  createdAt: DateTime!
  id: ID!
  language: Language
  languageName: String!
  updatedAt: DateTime!
}

type Mutation {
  createChatMessage(content: String!, role: String!, sessionId: ID!): [ChatMessage]
  createChatSession(chatMode: String!, difficulty: Int!, flashcardMode: Boolean!, flashcardSetId: ID, languageName: String!, name: String): ChatSession
  createFlashcard(faces: [FlashcardFaceInput!]!, setId: ID!): Flashcard!
  createFlashcardSet(description: String, languageName: String!, name: String!): FlashcardSet!
  createLanguage(code: String!, name: String!): Language!
  createStory(input: CreateStoryInput!): Story!
  createTag(name: String!): Tag!
  createUser(languages: [String!]!, username: String!): User!
  createVocabulary(example: String, languageName: String!, meaning: String!, word: String!): Vocabulary!
  createWorksheet(input: CreateWorksheetInput!): Worksheet
  deleteChatSession(id: ID!): Boolean!
  deleteFlashcard(id: ID!): Boolean!
  deleteFlashcardSet(id: ID!): Boolean!
  deleteLanguage(id: ID!): Boolean!
  deleteStory(id: ID!): Boolean!
  deleteTag(id: ID!): Boolean!
  deleteUser(id: ID!): Boolean!
  deleteVocabulary(id: ID!): Boolean!
  deleteWorksheet(id: Int!): Boolean!
  generateFlashcardFaces(input: generateFlashcardFacesInput!): [generateFlashcardFacesPayload!]!
  updateChatSession(difficulty: Int, flashcardSetId: ID, id: ID!, name: String): ChatSession
  updateFlashcard(faces: [FlashcardFaceInput!]!, id: ID!): Flashcard!
  updateFlashcardSet(description: String, id: ID!, languageName: String, name: String): FlashcardSet!
  updateLanguage(code: String, id: ID!, name: String): Language!
  updateStory(id: ID!, input: UpdateStoryInput!): Story!
  updateStudiedFlashcard(id: ID!, score: Int!): Flashcard!
  updateTag(id: ID!, name: String!): Tag!
  updateUser(id: ID!, username: String!): User!
  updateVocabulary(example: String, id: ID!, languageName: String, meaning: String, word: String): Vocabulary!
  updateWorksheet(id: Int!, input: UpdateWorksheetInput!): Worksheet
}

type PaginatedStoriesResponse {
  hasNextPage: Boolean!
  stories: [Story!]!
  totalCount: Int!
}

type Query {
  chatSession(id: ID!): ChatSession
  chatSessions: [ChatSession!]
  flashcard(id: ID!): Flashcard
  flashcardSet(id: ID!): FlashcardSet
  flashcardSets: [FlashcardSet!]!
  flashcardSetsByLanguage(languageName: String!): [FlashcardSet!]!
  language(id: ID!): Language
  languageByName(name: String!): Language
  languageFaceConfig(languageName: String!): LanguageFaceConfig
  languages: [Language!]!
  publicStories(filters: StoryFilters, orderBy: String = "createdAt", orderDirection: String = "desc", page: Int = 1, pageSize: Int = 10): PaginatedStoriesResponse!
  stories: [Story!]!
  story(id: ID!): Story
  tag(id: ID!): Tag
  tags: [Tag!]!
  user(userId: ID!): User
  users: [User!]
  vocabularies: [Vocabulary!]!
  vocabulary(id: ID!): Vocabulary
  worksheet(id: ID!): Worksheet
  worksheets: [Worksheet!]!
}

type ReadingProgress {
  addedToLibraryAt: DateTime
  chapterProgresses: [ChapterProgress!]
  completedAt: DateTime
  createdAt: DateTime!
  currentPosition: JSON
  id: ID!
  lastReadAt: DateTime
  progress: Float!
  rating: Int
  startedAt: DateTime
  story: Story
  storyId: ID!
  updatedAt: DateTime!
  user: User
  userId: ID!
}

type Story {
  audioUrl: String
  averageRating: Float
  chapters: [Chapter!]
  completedAt: DateTime
  comprehensionQuestions: [ComprehensionQuestion!]
  content: String!
  createdAt: DateTime!
  description: String!
  difficulty: Int!
  id: ID!
  imageUrl: String
  isPublished: Boolean!
  isReviewed: Boolean!
  language: Language
  languageName: String!
  readCount: Int!
  readingProgress: [ReadingProgress!]
  tags: [Tag!]
  title: String!
  translatedTitle: String!
  updatedAt: DateTime!
  user: User
  userId: ID!
  vocabularies: [Vocabulary!]
}

input StoryFilters {
  difficulty: Int
  languageName: String
  searchTerm: String
  tags: [String!]
}

type Submission {
  answer: JSON!
  createdAt: DateTime!
  exercise: Exercise
  exerciseId: ID!
  id: ID!
  isCorrect: Boolean!
  user: User
  userId: ID!
}

type Tag {
  createdAt: DateTime!
  id: ID!
  name: String!
  stories: [Story!]
  updatedAt: DateTime!
}

input UpdateStoryInput {
  content: String
  description: String
  difficulty: Int
  isPublished: Boolean
  languageName: String
  tags: [String!]
  title: String
  translatedTitle: String
}

input UpdateWorksheetInput {
  content: String
  languageName: String
}

type User {
  chatSessions: [ChatSession!]
  createdAt: DateTime!
  email: String!
  flashcardSets: [FlashcardSet!]
  languages: [Language!]
  readingProgress: [ReadingProgress!]
  stories: [Story!]
  submission: [Submission!]
  updatedAt: DateTime!
  userId: ID!
  username: String!
  vocabularies: [Vocabulary!]
  worksheets: [Worksheet!]
}

type Vocabulary {
  createdAt: DateTime!
  example: String
  flashcardSet: FlashcardSet
  flashcardSetId: Int
  id: ID!
  language: Language
  languageName: String!
  meaning: String!
  stories: [Story!]
  story: Story
  updatedAt: DateTime!
  user: User
  userId: ID!
  word: String!
}

type Worksheet {
  completedAt: DateTime
  createdAt: DateTime!
  description: String!
  exercises: [Exercise]
  id: ID!
  language: Language
  languageName: String!
  title: String!
  updatedAt: DateTime!
  user: User
  userId: ID!
}

input generateFlashcardFacesInput {
  faces: [FaceType!]!
  languageName: String!
  word: String!
}

type generateFlashcardFacesPayload {
  content: String!
  faceType: String!
}