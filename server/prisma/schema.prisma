generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DEV_DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  userId          String            @id @unique @db.Uuid
  email           String            @unique
  username        String            @unique
  createdAt       DateTime          @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime          @updatedAt @db.Timestamptz(3)
  languages       Language[]
  vocabularies    Vocabulary[]
  stories         Story[]
  worksheets      Worksheet[]
  readingProgress ReadingProgress[]
}

model Language {
  id           Int          @id @default(autoincrement())
  name         String       @unique
  code         String       @unique
  vocabularies Vocabulary[]
  stories      Story[]
  worksheets   Worksheet[]
  users        User[]
}

model Vocabulary {
  id           Int      @id @default(autoincrement())
  word         String
  meaning      String
  example      String?
  userId       String   @db.Uuid
  user         User     @relation(fields: [userId], references: [userId])
  languageName String
  language     Language @relation(fields: [languageName], references: [name])
  createdAt    DateTime @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime @updatedAt @db.Timestamptz(3)
  storyId      Int?
  Story        Story?   @relation(fields: [storyId], references: [id])
}

model Story {
  id                     Int                     @id @default(autoincrement())
  title                  String
  translatedTitle        String
  description            String
  content                String
  difficulty             Int
  readCount              Int                     @default(0)
  audioUrl               String?
  imageUrl               String?
  averageRating          Float?
  isPublished            Boolean                 @default(false)
  isReviewed             Boolean                 @default(false)
  vocabularies           Vocabulary[]
  userId                 String                  @db.Uuid
  user                   User                    @relation(fields: [userId], references: [userId])
  languageName           String
  language               Language                @relation(fields: [languageName], references: [name])
  createdAt              DateTime                @default(now()) @db.Timestamptz(3)
  updatedAt              DateTime                @updatedAt @db.Timestamptz(3)
  tags                   Tag[]
  readingProgress        ReadingProgress[]
  comprehensionQuestions ComprehensionQuestion[]
}

model ReadingProgress {
  id               Int       @id @default(autoincrement())
  userId           String    @db.Uuid
  user             User      @relation(fields: [userId], references: [userId])
  storyId          Int
  story            Story     @relation(fields: [storyId], references: [id])
  progress         Float     @default(0)
  startedAt        DateTime  @db.Timestamptz(3)
  completedAt      DateTime? @db.Timestamptz(3)
  lastReadAt       DateTime? @db.Timestamptz(3)
  addedToLibraryAt DateTime? @db.Timestamptz(3)
  currentPosition  Json?
  rating           Int?
  createdAt        DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt        DateTime  @updatedAt @db.Timestamptz(3)

  @@unique([userId, storyId])
}

model ComprehensionQuestion {
  id       Int      @id @default(autoincrement())
  question String
  options  String[]
  answer   Int
  storyId  Int
  story    Story    @relation(fields: [storyId], references: [id])
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  stories   Story[]
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
}

model Worksheet {
  id           Int       @id @default(autoincrement())
  content      String
  userId       String    @db.Uuid
  user         User      @relation(fields: [userId], references: [userId])
  languageName String
  language     Language  @relation(fields: [languageName], references: [name])
  completedAt  DateTime? @db.Timestamptz(3)
  createdAt    DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime  @updatedAt @db.Timestamptz(3)
}

// model FlashcardSet {
//   id           Int          @id @default(autoincrement())
//   name         String
//   description  String?
//   userId       String       @db.Uuid
//   user         User         @relation(fields: [userId], references: [userId])
//   vocabularies Vocabulary[]
//   cards        Flashcard[]
// }

// model Flashcard {
//   id            Int          @id @default(autoincrement())
//   setId         Int
//   set           FlashcardSet @relation(fields: [setId], references: [id])
//   nextReviewAt  DateTime     @db.Timestamptz(3)
//   easeFactor    Float        @default(2.5)
//   interval      Int          @default(0)
//   repetitions   Int          @default(0)
// }

// model ChatSession {
//   id           Int      @id @default(autoincrement())
//   userId       String   @db.Uuid
//   user         User     @relation(fields: [userId], references: [userId])
//   languageName String
//   language     Language @relation(fields: [languageName], references: [name])
//   messages     Json[]   // Array of message objects
//   createdAt    DateTime @default(now()) @db.Timestamptz(3)
//   updatedAt    DateTime @updatedAt @db.Timestamptz(3)
// }
