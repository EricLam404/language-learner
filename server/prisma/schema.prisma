generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  userId          String            @id @unique @db.Uuid
  email           String            @unique
  username        String            @unique
  createdAt       DateTime          @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime          @updatedAt @db.Timestamptz(3)
  languages       Language[]
  vocabularies    Vocabulary[]
  stories         Story[]
  worksheets      Worksheet[]
  readingProgress ReadingProgress[]
  flashcardSet    FlashcardSet[]
  chatSession     ChatSession[]
  submission      Submission[]
  // UserRole        UserRole[]
}

model Language {
  id           Int                 @id @default(autoincrement())
  name         String              @unique
  code         String              @unique
  vocabularies Vocabulary[]
  stories      Story[]
  worksheets   Worksheet[]
  users        User[]
  chatSession  ChatSession[]
  flashcardSet FlashcardSet[]
  faceConfig   LanguageFaceConfig?
}

model LanguageFaceConfig {
  id           Int      @id @default(autoincrement())
  languageName String   @unique
  language     Language @relation(fields: [languageName], references: [name])
  config       Json     @default("{\"required\": [\"WORD\", \"TRANSLATION\"], \"optional\": [], \"typeMetadata\": {}}")
  createdAt    DateTime @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime @updatedAt @db.Timestamptz(3)
}

model Vocabulary {
  id             Int           @id @default(autoincrement())
  word           String
  meaning        String
  example        String?
  userId         String        @db.Uuid
  user           User          @relation(fields: [userId], references: [userId])
  languageName   String
  language       Language      @relation(fields: [languageName], references: [name])
  createdAt      DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime      @updatedAt @db.Timestamptz(3)
  stories        Story[]
  flashcardSet   FlashcardSet? @relation(fields: [flashcardSetId], references: [id])
  flashcardSetId Int?
}

model Story {
  id              Int               @id @default(autoincrement())
  title           String
  translatedTitle String
  description     String
  content         String
  difficulty      Int
  readCount       Int               @default(0)
  audioUrl        String?
  imageUrl        String?
  averageRating   Float?
  isPublished     Boolean           @default(false)
  isReviewed      Boolean           @default(false)
  vocabularies    Vocabulary[]
  userId          String            @db.Uuid
  user            User              @relation(fields: [userId], references: [userId])
  languageName    String
  language        Language          @relation(fields: [languageName], references: [name])
  createdAt       DateTime          @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime          @updatedAt @db.Timestamptz(3)
  tags            Tag[]
  readingProgress ReadingProgress[]
  chapters        Chapter[]
}

model Chapter {
  id                     Int                     @id @default(autoincrement())
  title                  String
  content                String
  orderIndex             Int
  estimatedReadingTime   Int?
  audioUrl               String?
  storyId                Int
  story                  Story                   @relation(fields: [storyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt              DateTime                @default(now()) @db.Timestamptz(3)
  updatedAt              DateTime                @updatedAt @db.Timestamptz(3)
  chapterProgresses      ChapterProgress[]
  comprehensionQuestions ComprehensionQuestion[]

  @@unique([storyId, orderIndex])
}

model ReadingProgress {
  id                Int               @id @default(autoincrement())
  userId            String            @db.Uuid
  user              User              @relation(fields: [userId], references: [userId])
  storyId           Int
  story             Story             @relation(fields: [storyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  progress          Float             @default(0)
  startedAt         DateTime          @db.Timestamptz(3)
  completedAt       DateTime?         @db.Timestamptz(3)
  lastReadAt        DateTime?         @db.Timestamptz(3)
  addedToLibraryAt  DateTime?         @db.Timestamptz(3)
  currentPosition   Json?
  rating            Int?
  createdAt         DateTime          @default(now()) @db.Timestamptz(3)
  updatedAt         DateTime          @updatedAt @db.Timestamptz(3)
  chapterProgresses ChapterProgress[]

  @@unique([userId, storyId])
}

model ChapterProgress {
  id                Int             @id @default(autoincrement())
  readingProgressId Int
  readingProgress   ReadingProgress @relation(fields: [readingProgressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chapterId         Int
  chapter           Chapter         @relation(fields: [chapterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  progress          Float           @default(0) // Percentage of completion
  currentPosition   Json? // Stores last reading position data
  startedAt         DateTime?       @db.Timestamptz(3)
  completedAt       DateTime?       @db.Timestamptz(3)
  lastReadAt        DateTime?       @db.Timestamptz(3)

  @@unique([readingProgressId, chapterId])
}

model ComprehensionQuestion {
  id        Int                           @id @default(autoincrement())
  question  String
  chapterId Int
  chapter   Chapter                       @relation(fields: [chapterId], references: [id])
  options   ComprehensionQuestionOption[]
}

model ComprehensionQuestionOption {
  id         Int                   @id @default(autoincrement())
  content    String
  order      Int
  isCorrect  Boolean               @default(false)
  questionId Int
  question   ComprehensionQuestion @relation(fields: [questionId], references: [id])

  @@unique([questionId, order])
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  stories   Story[]
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
}

model Worksheet {
  id           Int        @id @default(autoincrement())
  title        String
  description  String?
  userId       String     @db.Uuid
  user         User       @relation(fields: [userId], references: [userId])
  languageName String
  language     Language   @relation(fields: [languageName], references: [name])
  exercises    Exercise[]
  completedAt  DateTime?  @db.Timestamptz(3)
  createdAt    DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime   @updatedAt @db.Timestamptz(3)
}

model Exercise {
  id          Int          @id @default(autoincrement())
  type        ExerciseType
  content     Json
  order       Int
  worksheetId Int
  worksheet   Worksheet    @relation(fields: [worksheetId], references: [id])
  submissions Submission[]
}

enum ExerciseType {
  MULTIPLE_CHOICE
  FILL_IN_BLANK
  MATCHING
  SENTENCE_CONSTRUCTION
  TRANSLATION
}

model Submission {
  id         Int      @id @default(autoincrement())
  exerciseId Int
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  userId     String   @db.Uuid
  user       User     @relation(fields: [userId], references: [userId])
  answer     Json
  isCorrect  Boolean
  createdAt  DateTime @default(now()) @db.Timestamptz(3)
}

model FlashcardSet {
  id            Int           @id @default(autoincrement())
  name          String
  description   String?
  userId        String        @db.Uuid
  user          User          @relation(fields: [userId], references: [userId])
  languageName  String
  language      Language      @relation(fields: [languageName], references: [name])
  lastFrontFace FaceType?
  vocabularies  Vocabulary[]
  cards         Flashcard[]
  chatSessions  ChatSession[]
}

model Flashcard {
  id           Int             @id @default(autoincrement())
  setId        Int
  set          FlashcardSet    @relation(fields: [setId], references: [id])
  faces        FlashcardFace[]
  nextReviewAt DateTime        @db.Timestamptz(3)
  easeFactor   Float           @default(2.5)
  interval     Float           @default(1.0)
  n            Int             @default(0)
  createdAt    DateTime        @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime        @updatedAt @db.Timestamptz(3)
}

model FlashcardFace {
  id          Int       @id @default(autoincrement())
  flashcardId Int
  flashcard   Flashcard @relation(fields: [flashcardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  content     String
  type        FaceType
  order       Int
  audioUrl    String?
  imageUrl    String?
  metadata    Json?
  isFront     Boolean   @default(false)
  createdAt   DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime  @updatedAt @db.Timestamptz(3)

  @@unique([flashcardId, type])
  @@index([type])
}

enum FaceType {
  WORD
  TRANSLATION
  EXAMPLE_SENTENCE
  EXAMPLE_SENTENCE_TRANSLATION
  PINYIN
  CHARACTER
  ROMAJI
  HIRAGANA
  KATAKANA
  TRANSLITERATION
  DEFINITION
  CONTEXT_NOTES
  MNEMONIC
  PART_OF_SPEECH
  CONJUGATION
  GENDER
  PLURAL_FORM
  AUDIO_NATIVE
  AUDIO_SLOW
  IMAGE
  VIDEO
  NOTES
  OTHER
}

model ChatSession {
  id             String        @id @default(uuid()) @db.Uuid
  userId         String        @db.Uuid
  user           User          @relation(fields: [userId], references: [userId])
  languageName   String
  language       Language      @relation(fields: [languageName], references: [name])
  flashcardSetId Int?
  flashcardSet   FlashcardSet? @relation(fields: [flashcardSetId], references: [id])
  name           String        @default("New Chat")
  difficulty     Int           @default(0)
  messages       ChatMessage[]
  createdAt      DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime      @updatedAt @db.Timestamptz(3)

  @@index([userId])
  @@index([flashcardSetId])
}

model ChatMessage {
  id        String      @id @default(uuid()) @db.Uuid
  sessionId String      @db.Uuid
  session   ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  role      String
  content   String
  // flashcardId   Int?
  // flashcard     Flashcard?  @relation(fields: [flashcardId], references: [id])
  // vocabularyIds Int[]      // Array of vocabulary IDs used in this message
  createdAt DateTime    @default(now()) @db.Timestamptz(3)
  updatedAt DateTime    @updatedAt @db.Timestamptz(3)
  // @@index([flashcardId])

  @@index([sessionId, createdAt])
}

// enum AppPermission {
//   FLASHCARDS_CREATE @map("flashcards.create")
//   FLASHCARDS_EDIT   @map("flashcards.edit")
//   FLASHCARDS_DELETE @map("flashcards.delete")
//   LESSONS_CREATE    @map("lessons.create")
//   LESSONS_EDIT      @map("lessons.edit")
//   LESSONS_DELETE    @map("lessons.delete")
//   QUIZZES_CREATE    @map("quizzes.create")
//   QUIZZES_EDIT      @map("quizzes.edit")
//   QUIZZES_DELETE    @map("quizzes.delete")
//   USERS_MANAGE      @map("users.manage")

//   @@map("app_permission")
// }

// enum AppRole {
//   ADMIN @map("admin")
//   USER  @map("user")

//   @@map("app_role")
// }

// model UserRole {
//   id     BigInt  @id @default(autoincrement())
//   userId String  @map("user_id") @db.Uuid
//   user   User    @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
//   role   AppRole

//   @@unique([userId, role])
// }

// model RolePermission {
//   id         BigInt        @id @default(autoincrement())
//   role       AppRole
//   permission AppPermission

//   @@unique([role, permission])
// }
